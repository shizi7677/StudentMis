注意：
前端的购物车页面中的信息，代表的就是一笔新的订单中所包含的宠物信息；一旦提交，下次访问就创建出一笔新的订单；
而数据库的cart表是orders和item的连接表；

user: 用户信息
 username *
 password
 realname
 address
 email

hobby: 用户喜好信息
 username <<
 kindid <<

kind：宠物种类信息   kind：product = 1:M
 kindid *
 name
 description

product: 代表一种宠物的物理信息表   product:item=1:M
productid*
kindid<<
name
description

item:  个体宠物的商品信息表
itemid*
productid<<
unitcost
supplier
status
description

orders:订单表
   orderid*
   orderdate
   totalprice


cart:购物车表
    orderid*  <<
    itemid*  <<
    quantity


创建查询宠物信息的存储过程：
drop procedure if exists queryPet;
delimiter $
create procedure queryPet (
	in  in_kindid varchar(10),
	in  in_productid varchar(10),
	in  in_itemid varchar(10)
)
begin
	set @oid:='';    #订单编号
	set @odate=null; #订单日期
	set @iid='';  #宠物编号
	set @qty:=0;   #购买数量
  	#取得最后的订单编号
	select orderid, orderdate into @oid,@odate
	from orders
	order by orderid desc
	limit 1;
	  #判断原先是否有订单没有提交，若有则不需要创建新的订单；
	#即：是否用创建新的订单，可以通过判断orderdate是否为空来实现；
	if @odate!='' then   #创建新的订单
		set @oid:=@oid+1;
		insert into orders(orderid) values(@oid);
	end if;
    #无需新订单；通过判断新添加的itemid在cart中是否存在
    select itemid, quantity into @iid, @qty
    from cart
    where orderid=@oid and
            itemid=in_itemid;
   if @iid='' then   # 不存在petStore，是新商品则在cart中要添加记录；
    insert into cart(orderid,itemid, quantity) values (@oid,in_itemid,in_quantity);
   else   # 存在，是老商品，添加数量即可；
      call updateCart( @oid, @iid, @qty+in_quantity);
    end if;
	 select  *
	 from cart
	 where orderid = @oid;
end $
delimiter ;


修改购物车中的购买数量；
drop procedure if exists updateCart;
delimiter $
create procedure updateCart(
	in in_orderid varchar(10),
   in in_itemid varchar(10),
 	in in_quantity int
)
begin
	update cart
	set quantity = in_quantity
	where orderid = in_orderid and itemid = in_itemid;
end $
delimiter ;